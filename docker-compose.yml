version: '3.7'
services:

  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: postgres/dockerfile.postgres
    ports:
      - 5433:5432
    volumes:
      - "./postgres/postgresql.conf:/usr/local/etc/postgres/postgresql.conf"
      - postgres_log:/var/lib/pgsql/data
    command: "postgres -c config_file=/usr/local/etc/postgres/postgresql.conf"
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M

  cadastrol-server:
    container_name: cadastrol-server
    build:
      context: .
      dockerfile: src/dockerfile.java-maven
    ports:
      - 8090:8090
    depends_on:
      - postgres
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/dockerfile.nginx
    ports:
      - 8000:8000
    volumes:
      - nginx_log:/tmp
    depends_on:
      - cadastrol-server
    networks:
      - backend_network

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - node-exporter/:/node-exporter
    networks:
      - backend_network

  cadvisor:
    container_name: cadvisor
    image: google/cadvisor:latest
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - cadvisor_log/:/etc/cadvisor
    networks:
      - backend_network

  pg-exporter:
    container_name: pg-exporter
    build:
      context: .
      dockerfile: postgres/dockerfile.pg-exporter
    ports:
      - 9630:9630
    volumes:
      - pg-exporter_log:/pg-exporter
    depends_on:
      - postgres
    networks:
      - backend_network

  prometheus:
    container_name: prometheus
    build:
      context: .
      dockerfile: prometheus/dockerfile.prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-admin-api'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    volumes:
      - prometheus_log:/prometheus
    depends_on:
      - nginx
      - node-exporter
      - cadvisor
      - pg-exporter
    networks:
      - backend_network

  grafana:
    container_name: grafana
    build:
      context: .
      dockerfile: grafana/dockerfile.grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana_log:/usr/share/grafana
    depends_on:
      - prometheus
    networks:
      - backend_network

  alertmanager:
    container_name: alertmanager
    build:
      context: .
      dockerfile: prometheus/alertmanager/dockerfile.alertmanager
    command: --config.file=/etc/prometheus/alertmanager/alertmanager.yml
    ports:
      - 9093:9093
    volumes:
      - alertmanager_log:/etc/alertmanager
    networks:
      - backend_network

volumes:
  postgres_log:
  nginx_log:
  node-exporter:
  cadvisor_log:
  pg-exporter_log:
  prometheus_log:
  grafana_log:
  alertmanager_log:
networks:
  backend_network:
    name: backend_network
